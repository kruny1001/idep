DataClass <- setRefClass("DataClass",
fields = list(
data = "data.table",
train = "data.table",
test = "data.table"
),
methods = list(
initialize = function(filePath){
print("DataClass is initiated")
demoDataFile = filePath
.self$data = data.table(read.csv(demoDataFile))
},
finilize = function(){
print("DataClass is terminated")
}
)
)
demoDataFile = "GSE37704_sailfish_genecounts.csv" #"expression1_no_duplicate.csv"
dataObj = DataClass$new(filePath = demoDataFile)
dataObj$data
table(dataObj$data)
tail(dataObj$data)
?colSums
new = sum(dataObj$data)
str(dataObj$data)
summary(dataObj$data)
dataObj$data[, lapply(.SD, sum, na.rm=TRUE), by=category ]
dataObj$data[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
colsToSum <- names(dataObj$data)
dataObj$data[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
dt2 = dataObj$data[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
colsToSum
colsToSum <- names(dataObj$data[,-1])
colsToSum
dt2 = dataObj$data[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
dt2
barplot( dt2/1e6, col="green",las=3, main="Total read counts (millions)")
barplot( as.matrix(dt2/1e6), col="green",las=3, main="Total read counts (millions)")
dim(dataObj$data)[2]
colors = dim(dataObj$data)[2]
myColors = rainbow(colors)
plot(density(dataObj$data),col = myColors[1],
xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
plot(density(dataObj$data),col = myColors[1],
xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
plot(density(dataObj$data[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
dataObj$data
dataObj$data[,1]
dataObj$data[,-1]
dataObj$data[,2]
plot(density(dataObj$data[,2]),col = myColors[1]
,xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
dataObj$data[,2]
density(dataObj$data[,2])
?density
source('classes/librarySetup.R')
density
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
plot(density(x[,2]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
lines(density(x[,3]),col=myColors[i] )
lines(density(x[,3]),col=myColors[3] )
plot(density(x[,2]),col = myColors[1]
,xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
lines(density(x[,3]),col=myColors[3] )
lines(density(x[,4]),col=myColors[3] )
lines(density(x[,5]),col=myColors[3] )
x
x <- x/1e6
x <- x[,-1]/1e6
plot(density(x[,2]),col = myColors[1]
,xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
lines(density(x[,3]),col=myColors[3] )
lines(density(x[,4]),col=myColors[3] )
lines(density(x[,5]),col=myColors[3] )
density(x[,1])
density(x[,-1])
density(x[,2])
plot(density(x[,2]),col = myColors[1]
,xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
x
density(dataObj$data[,1])
density(dataObj$data[,2])
dataObj$data[,2]
density(as.matrix(dataObj$data[,2]))
density(as.matrix(dataObj$data[,2])/1e6)
density(as.matrix(dataObj$data[,2])/1e5)
tt = density(as.matrix(dataObj$data[,2])/1e5)
plot(tt,col = myColors[1]
,xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
dataObj$data[,2]
tt = density(as.matrix(dataObj$data[,2]))
plot(tt,col = myColors[1]
,xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
x<-dataObj$data
dataType =c(TRUE)
for( i in 2:dim(x)[2])
dataType = c( dataType, is.numeric(x[,i]) )
for( i in 2:dim(x)[2])
dataType = c( dataType, is.numeric(x[,i]) )
2:dim(x)[2]
x[,2]
for( i in 2:dim(x)[2])
dataType = c( dataType, is.numeric(x[,i]) )
x<-data.frame(dataObj$data)
dataType =c(TRUE)
2:dim(x)[2]
x[,2]
for( i in 2:dim(x)[2])
dataType = c( dataType, is.numeric(x[,i]) )
dataType
if(sum(dataType) <=2) return (NULL)  # only less than 2 columns are numbers
x <- x[,dataType]  # only keep numeric columns
x
x[,1] <- toupper(x[,1])
x = x[order(- apply(x[,2:dim(x)[2]],1,sd) ),]  # sort by SD
x <- x[!duplicated(x[,1]) ,]  # remove duplicated genes
rownames(x) <- x[,1]
x <- as.matrix(x[,c(-1)])
x
if( sum( is.na(x)) > 0 ) {     # if there is missing values
rowMeans <- apply(x,1, function (y)  median(y,na.rm=T))
for( i in 1:dim(x)[1] )
x[i, which( is.na(x[i,]) )  ]  <- rowMeans[i]
}
mean.kurtosis = mean( apply(x,2, kurtosis) )
# if FPKM, microarray
incProgress(1/3,"Pre-processing data")
if ( is.integer(x) ) dataTypeWarning = 1;  # Data appears to be read counts
#-------------filtering
tem <- apply(x,1,max)
x <- x[which(tem > input$lowFilter),]  # max by row is at least
x <- x[which(apply(x,1, function(y) max(y)- min(y) ) > 0  ),]  # remove rows with all the same levels
#--------------Log transform
# Takes log if log is selected OR kurtosis is big than 100
if ( (input$transform == TRUE) | (mean.kurtosis > kurtosis.log ) )
x = log(x+abs( input$logStart),2)
tem <- apply(x,1,sd)
x <- x[order(-tem),]  # sort by SD
rawCounts = NULL
mean.kurtosis = mean( apply(x,2, kurtosis) )
incProgress(1/3,"Pre-processing data")
incProgress(1/3,"Pre-processing data")
if ( is.integer(x) ) dataTypeWarning = 1;  # Data appears to be read counts
tem <- apply(x,1,max)
x <- x[which(tem > input$lowFilter),]  # max by row is at least
x <- x[which(apply(x,1, function(y) max(y)- min(y) ) > 0  ),]  # remove rows with all the same levels
x
x = log(x+abs( input$logStart),2)
getwd()
list.of.packages <- c("shiny", "shinyAce",  "RSQLite", "gplots", "ggplot2", "e1071", "reshape2",
"DT", "plotly", "limma", "DESeq2", "edgeR", "gage", "PGSEA", "fgsea",
"ReactomePA", "pathview", "PREDA", "PREDAsampledata", "sfsmisc", "lokern",
"multtest")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
list.of.packages <- c("shiny", "shinyAce", "shinyBS",  "RSQLite", "gplots", "ggplot2", "e1071", "reshape2",
"DT", "plotly", "limma", "DESeq2", "edgeR", "gage", "PGSEA", "fgsea",
"ReactomePA", "pathview", "PREDA", "PREDAsampledata", "sfsmisc", "lokern",
"multtest")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
density(dataObj$data)
density(dataObj$data[,2])
dataObj$data
density(dataObj$data[,1])
density(as.data.frame(dataObj$data[,1]))
density(as.list(dataObj$data[,1]))
density(as.matrix(dataObj$data[,1]))
as.matrix(dataObj$data[,1])
density(as.matrix(dataObj$data[,2]))
x = log(dataObj$data[,2]+abs( 3),2)
x
x = log(dataObj$data[,2]+abs( 4),2)
x = log(dataObj$data[,2]+abs( 4),2)
x
density(x)
x
density(as.data.frame(x))
density(as.matrix(x))
plot(x1,col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
x1 = density(as.matrix(x))
plot(x1,col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
plot(x1,col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] )
lines(density(x[,i]),col=myColors[i] )
x1
dataObj$data[,2]
x = log(dataObj$data[,-1]+abs( 4),2)
x
plot(x[,1],col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
x
plot(density(as.data.frame(x[,1])),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
plot(density(as.matrix(x[,1])),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
plot(density(as.matrix(x[,1])),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] )
lines(density(as.matrix(x[,i])),col=myColors[i] )
for( i in 2:dim(x)[2] ){
print(i)
}
plot(density(as.matrix(x[,1])),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
lines(density(as.matrix(x[,2])),col=myColors[2] )
plot(density(as.matrix(x[,1])),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
as.matrix(x[,i])
i = 1
as.matrix(x[,i])
x[,i]
x = as.data.frame(x)
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
x = log(dataObj$data[,-1]+abs( 2),2)
x = as.data.frame(x)
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
x = log(dataObj$data[,-1]+abs( 1),2)
x = as.data.frame(x)
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
logT = 5
x = log(dataObj$data[,-1]+abs(logT),2)
x = as.data.frame(x)
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
logT = 2
x = log(dataObj$data[,-1]+abs(logT),2)
x = as.data.frame(x)
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
boxplot(x, las = 2, ylab="Transformed expression levels", main="Distribution of transformed data")
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2], main="Scatter plot of first two samples")
logT = 20
x = log(dataObj$data[,-1]+abs(logT),2)
x = as.data.frame(x)
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
demoDataFile = "GSE37704_sailfish_genecounts.csv" #"expression1_no_duplicate.csv"
dataObj = DataClass$new(filePath = demoDataFile)
dataObj$data # Load Data
# Pre-Process
colsToSum <- names(dataObj$data[,-1])
dt2 = dataObj$data[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
barplot( as.matrix(dt2/1e6), col="green",las=3, main="Total read counts (millions)")
## EDA -  required data transform
par(mfrow=c(3,1))
colors = dim(dataObj$data)[2]
myColors = rainbow(colors)
# Distribution of transformed Data
## TODO: transform data
startedLog = 2
x = log(dataObj$data[,-1]+abs(startedLog),2)
x = as.data.frame(x)
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
boxplot(x, las = 2, ylab="Transformed expression levels", main="Distribution of transformed data")
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2], main="Scatter plot of first two samples")
#
tem <- apply(x,1,sd)
x <- x[order(-tem),]  # sort by SD
x
x = as.data.frame(x)
tem <- apply(x,1,sd)
x <- x[order(-tem),]  # sort by SD
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
runGist
runGist(3239667)
runGist("https://gist.github.com/jcheng5/3239667")
library(shiny)
runGist(3239667)
runGist(3239667)
par(mfrow=c(3,1))
colors = dim(dataObj$data)[2]
myColors = rainbow(colors)
# Distribution of transformed Data
## TODO: transform data
startedLog = 2
x = log(dataObj$data[,-1]+abs(startedLog),2)
x = as.data.frame(x)
tem <- apply(x,1,sd)
x <- x[order(-tem),]  # sort by SD
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
boxplot(x, las = 2, ylab="Transformed expression levels", main="Distribution of transformed data")
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2], main="Scatter plot of first two samples")
source('classes/librarySetup.R')
source('classes/librarySetup.R')
source('classes/DataClass.R')
? source
source('classes/librarySetup.R', echo=F)
source('classes/DataClass.R', echo=F)
source('classes/librarySetup.R', echo=F)
source('classes/DataClass.R', echo=F)
dataObj <- DataClass$new()
dataObj <- DataClass$new(filePath="GSE37704_sailfish_genecounts.csv")
dataObj$data
## EDA -  required data transform
# Distribution of transformed Data
## TODO: transform data
par(mfrow=c(3,1))
colors = dim(dataObj$data)[2]
myColors = rainbow(colors)
startedLog = 2
x = log(dataObj$data[,-1]+abs(startedLog),2)
x = as.data.frame(x)
tem <- apply(x,1,sd)
x <- x[order(-tem),]  # sort by SD
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
boxplot(x, las = 2, ylab="Transformed expression levels", main="Distribution of transformed data")
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2], main="Scatter plot of first two samples")
tem
order(-tem)
x
par(mfrow=c(3,1))
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
boxplot(x, las = 2, ylab="Transformed expression levels", main="Distribution of transformed data")
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2], main="Scatter plot of first two samples")
library(plumber)
r <- plumb("plumberImp.R")  # Where 'myfile.R' is the location of the file shown above
r$run(port=8000)
library(plumber)
r <- plumb("plumberImp.R")  # Where 'myfile.R' is the location of the file shown above
r$run(port=8000)
library(plumber)
r <- plumb("plumberImp.R")  # Where 'myfile.R' is the location of the file shown above
r$run(port=8000)
library(plumber)
r <- plumb("plumberImp.R")  # Where 'myfile.R' is the location of the file shown above
r$run(port=8000)
dataObj <- DataClass$new(filePath="GSE37704_sailfish_genecounts.csv")
sum(dataObj$data[,2])
library(plumber)
r <- plumb("plumberImp.R")  # Where 'myfile.R' is the location of the file shown above
r$run(port=8000)
library(plumber)
r <- plumb("plumberImp.R")  # Where 'myfile.R' is the location of the file shown above
r$run(port=8000)
dataObj <- DataClass$new(filePath="GSE37704_sailfish_genecounts.csv")
colsToSum <- names(dataObj$data[,-1])
dt2 = dataObj$data[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
barplot( as.matrix(dt2/1e6), col="green",las=3, main="Total read counts (millions)")
dataObj <- DataClass$new(filePath="GSE37704_sailfish_genecounts.csv")
localData = dataObj$data
colsToSum <- names(localData[,-1])
dt2 = localData[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
barplot( as.matrix(dt2/1e6), col="green",las=3, main="Total read counts (millions)")
library(plumber)
r <- plumb("plumberImp.R")  # Where 'myfile.R' is the location of the file shown above
r$run(port=8000)
plot(1:2, 1:2)
plot(1:2, 1:2, main="test")
dataObj <- DataClass$new(filePath="GSE37704_sailfish_genecounts.csv")
localData = dataObj$data
plot(1:2, 1:2, main="test")
plots <- function(){
# load data
dataObj <- DataClass$new(filePath="GSE37704_sailfish_genecounts.csv")
localData = dataObj$data
#colsToSum <- names(localData[,-1])
#dt2 = localData[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
#barplot( as.matrix(dt2/1e6), col="green",las=3, main="Total read counts (millions)")
plot(1:2, 1:2, main="test")
}
plot(1:10, 1, main="test")
plot(1:10, 1:100, main="test")
plot(1:10, 1:10, main="test")
?plot
?plot
library(plumber)
r <- plumb("plumberImp.R")  # Where 'myfile.R' is the location of the file shown above
r$run(port=8000)
library(plumber)
r <- plumb("plumberImp.R")  # Where 'myfile.R' is the location of the file shown above
r$run(port=8000)
library(plumber)
r <- plumb("plumberImp.R")  # Where 'myfile.R' is the location of the file shown above
r$run(port=8000)
source('classes/librarySetup.R', echo=F)
source('classes/DataClass.R', echo=F)
pdf(NULL) # this prevents error Cannot open file 'Rplots.pdf'
Min_overlap <- 2
minSetSize = 3;
mappingCoverage = 0.60 # 60% percent genes has to be mapped for confident mapping
mappingEdge = 0.5  # Top species has 50% more genes mapped
PvalGeneInfo = 0.05; minGenes = 10 # min number of genes for ploting
kurtosis.log = 50  # log transform is enforced when kurtosis is big
kurtosis.warning = 10 # log transformation recommnded
minGenesEnrichment = 2 # perform GO or promoter analysis only if more than this many genes
PREDA_Permutations =1000
#sqlite  <- dbDriver("SQLite")
#convert <- dbConnect(sqlite,"../go/convertIDs.db")
#set.seed(2)
mycolors = sort(rainbow(20))[c(1,20,10,11,2,19,3,12,4,13,5,14,6,15,7,16,8,17,9,18)] # 20 colors for kNN clusters
#keggSpeciesID = read.csv("KEGG_Species_ID.csv")
#dim(keggSpeciesID)
#str(keggSpeciesID)
# load data
dataObj <- DataClass$new(filePath="GSE37704_sailfish_genecounts.csv")
dataObj$data
# Pre-Process
colsToSum <- names(dataObj$data[,-1])
dt2 = dataObj$data[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
barplot( as.matrix(dt2/1e6), col="green",las=3, main="Total read counts (millions)")
## EDA -  required data transform
# Distribution of transformed Data
## TODO: transform data
colors = dim(dataObj$data)[2]
myColors = rainbow(colors)
startedLog = 2
x = log(dataObj$data[,-1]+abs(startedLog),2)
x = as.data.frame(x)
tem <- apply(x,1,sd)
x <- x[order(-tem),]  # sort by SD
par(mfrow=c(3,1))
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
boxplot(x, las = 2, ylab="Transformed expression levels", main="Distribution of transformed data")
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2], main="Scatter plot of first two samples")
source('classes/librarySetup.R', echo=F)
source('classes/DataClass.R', echo=F)
pdf(NULL) # this prevents error Cannot open file 'Rplots.pdf'
Min_overlap <- 2
minSetSize = 3;
mappingCoverage = 0.60 # 60% percent genes has to be mapped for confident mapping
mappingEdge = 0.5  # Top species has 50% more genes mapped
PvalGeneInfo = 0.05; minGenes = 10 # min number of genes for ploting
kurtosis.log = 50  # log transform is enforced when kurtosis is big
kurtosis.warning = 10 # log transformation recommnded
minGenesEnrichment = 2 # perform GO or promoter analysis only if more than this many genes
PREDA_Permutations =1000
#sqlite  <- dbDriver("SQLite")
#convert <- dbConnect(sqlite,"../go/convertIDs.db")
#set.seed(2)
mycolors = sort(rainbow(20))[c(1,20,10,11,2,19,3,12,4,13,5,14,6,15,7,16,8,17,9,18)] # 20 colors for kNN clusters
#keggSpeciesID = read.csv("KEGG_Species_ID.csv")
#dim(keggSpeciesID)
#str(keggSpeciesID)
# load data
dataObj <- DataClass$new(filePath="GSE37704_sailfish_genecounts.csv")
dataObj$data
# Pre-Process
colsToSum <- names(dataObj$data[,-1])
dt2 = dataObj$data[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
barplot( as.matrix(dt2/1e6), col="green",las=3, main="Total read counts (millions)")
## EDA -  required data transform
# Distribution of transformed Data
## TODO: transform data
colors = dim(dataObj$data)[2]
myColors = rainbow(colors)
startedLog = 2
x = log(dataObj$data[,-1]+abs(startedLog),2)
x = as.data.frame(x)
tem <- apply(x,1,sd)
x <- x[order(-tem),]  # sort by SD
par(mfrow=c(3,1))
plot(density(x[,1]),col = myColors[1],xlab="Expresson values", ylab="Density", main= "Distribution of transformed data")
for( i in 2:dim(x)[2] ){
lines(density(as.matrix(x[,i])),col=myColors[i] )
}
boxplot(x, las = 2, ylab="Transformed expression levels", main="Distribution of transformed data")
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2], main="Scatter plot of first two samples")
boxplot(x, las = 2, ylab="Transformed expression levels", main="Distribution of transformed data")
plot(x[,1:2],xlab=colnames(x)[1],ylab=colnames(x)[2], main="Scatter plot of first two samples")
png("r.png", width=10, height=5)
boxplot(x, las = 2, ylab="Transformed expression levels", main="Distribution of transformed data")
dev.off()
dataObj$data
colsToSum <- names(dataObj$data[,-1])
dt2 = dataObj$data[, lapply(.SD, sum, na.rm=TRUE), .SDcols=colsToSum]
barplot( as.matrix(dt2/1e6), col="green",las=3, main="Total read counts (millions)")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.packages
list.of.packages <- c("shiny", "shinyAce", "shinyBS",  "RSQLite", "gplots", "ggplot2", "e1071", "reshape2",
"DT", "plotly", "limma", "DESeq2", "edgeR", "gage", "PGSEA", "fgsea",
"ReactomePA", "pathview", "PREDA", "PREDAsampledata", "sfsmisc", "lokern",
"multtest", "data.table")
list.of.bio.packages  <- c("limma", "DESeq2", "edgeR", "gage", "PGSEA", "fgsea",
"ReactomePA", "pathview", "PREDA", "PREDAsampledata", "sfsmisc", "lokern",
"multtest")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
new.packages
if(length(new.packages)) install.packages(new.packages)
new.bio.packages <- list.of.bio.packages[!(list.of.bio.packages %in% installed.packages()[,"Package"])]
if(length(list.of.bio.packages)){
source("https://bioconductor.org/biocLite.R")
biocLite(new.bio.packages, suppressUpdates = T)
}
lapply(list.of.packages, require, character.only = TRUE)
lapply(list.of.bio.packages, require, character.only = TRUE)
source('classes/librarySetup.R', echo=F)
